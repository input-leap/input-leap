# This is a basic workflow to help you get started with Actions

name: Build tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Set the build type here
env:
  CI_ENV_BUILD_TYPE: Debug
  B_BUILD_DIR: build
  B_BUILD_TYPE: Debug
  INPUTLEAP_VERSION_STAGE: Debug
  DEBIAN_FRONTEND: noninteractive

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  linux-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu:18.04", "ubuntu:20.04", "ubuntu:22.04"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - if: matrix.os == 'ubuntu:18.04'
        name: Add repositories with newer git and cmake
        run: |
          apt-get update -y
          # software-properties-common is needed for add-apt-repository
          apt-get install -y software-properties-common gpg wget
          # actions/checkout@v3 wants newer git than what's in default repositories
          add-apt-repository ppa:git-core/ppa
          # InputLeap requires at least CMake 3.12.
          # This mirrors instructions at https://apt.kitware.com
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
            | gpg --dearmor - \
            > /usr/share/keyrings/kitware-archive-keyring.gpg
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' \
            > /etc/apt/sources.list.d/kitware.list

      - name: Update image and install pre-reqs
        run: |
          apt-get update -y
          apt-get dist-upgrade -y
          apt-get install -y \
                  cmake \
                  g++ \
                  git \
                  libavahi-compat-libdnssd-dev \
                  libcurl4-openssl-dev \
                  libice-dev \
                  libsm-dev \
                  libssl-dev \
                  libxinerama-dev \
                  libxrandr-dev \
                  libxtst-dev \
                  libxkbcommon-dev \
                  libglib2.0-dev \
                  ninja-build \
                  qtdeclarative5-dev \
                  qttools5-dev

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Work around git safe directory check
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - if: matrix.os == 'ubuntu:22.04'
        name: build libei from git tag (0.4.1)
        run: |
            apt-get install -y python3-pip
            pip3 install meson
            apt-get install -y libsystemd-dev protobuf-compiler protobuf-c-compiler libprotobuf-c-dev meson git ca-certificates python3-pytest python3-attr python3-dbusmock
            git clone --depth 1 --branch 0.4.1 https://gitlab.freedesktop.org/libinput/libei
            cd libei
            meson -Dprefix=/usr _libei_builddir
            ninja -C _libei_builddir install
            cd ..
            rm -rf libei

      - if: matrix.os == 'ubuntu:22.04'
        name: build libportal from whot/libportal
        run: |
            apt-get install -y libglib2.0 gettext dbus meson libgirepository1.0-dev libgtk-3-dev valac python3-pip python3-dbusmock
            git clone https://github.com/whot/libportal
            cd libportal
            git checkout wip/inputcapture
            meson -Dprefix=/usr -Dbackend-gtk3=enabled -Ddocs=false _libportal_builddir
            ninja -C _libportal_builddir install
            cd ..
            rm -rf libportal

      - if: matrix.os == 'ubuntu:22.04'
        name: Run the build (with libei)
        run: sh -x ./clean_build.sh
        env:
            VERBOSE: 1
            B_CMAKE_FLAGS: -DINPUTLEAP_BUILD_LIBEI=TRUE

      - if: matrix.os != 'ubuntu:22.04'
        name: Run the build
        run: sh -x ./clean_build.sh
        env:
            VERBOSE: 1
            B_CMAKE_FLAGS: -DINPUTLEAP_BUILD_LIBEI=FALSE

      - name: Run the tests
        run: |
            cd ${B_BUILD_DIR}
            ctest --verbose

  mac-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, macos-12]

    env:
      VERBOSE: 1
      TERM: xterm-256color

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Setup the image
        run: |
          brew install qt5
          brew install ninja
      - name: Run the build
        run: env B_CMAKE_FLAGS="-DCMAKE_UNITY_BUILD=1" sh -x ./clean_build.sh
      - uses: actions/upload-artifact@v3
        with:
          name: Publish the DMG for ${{ matrix.os }}
          path: ./build/bundle/*.dmg
          if-no-files-found: warn
        if: ${{ env.B_BUILD_TYPE == 'Release' }}

  win-build-2019:
    runs-on: windows-2019

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
      - name: Download Bonjour SDK-like
        run: ./azure-pipelines/download_install_bonjour_sdk_like.ps1
      - name: Installing QT
        run: ./azure-pipelines/download_install_qt.ps1
      - name: Get build env
        run: Copy-Item azure-pipelines\build_env_tmpl.bat build_env.bat
      - name: Build
        run: call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 && clean_build.bat
        shell: cmd
      - uses: papeloto/action-zip@v1
        with:
          files: build\bin\${{ env.CI_ENV_BUILD_TYPE }}
          dest: ${{ env.CI_ENV_BUILD_TYPE }}.zip
        name: Archive Completed Build Directory
      - uses: actions/upload-artifact@v3
        with:
          name: Windows-2019-${{ env.CI_ENV_BUILD_TYPE }}
          path: ${{ env.CI_ENV_BUILD_TYPE }}.zip
          if-no-files-found: warn

  win-build-2022:
    runs-on: windows-2022

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
      - name: Download Bonjour SDK-like
        run: ./azure-pipelines/download_install_bonjour_sdk_like.ps1
      - name: Installing QT
        run: ./azure-pipelines/download_install_qt.ps1
      - name: Get build env
        run: Copy-Item azure-pipelines\build_env_tmpl.bat build_env.bat
      - name: Build
        run: call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 && clean_build.bat
        shell: cmd
      - uses: papeloto/action-zip@v1
        with:
          files: build\bin\${{ env.CI_ENV_BUILD_TYPE }}
          dest: ${{ env.CI_ENV_BUILD_TYPE }}.zip
        name: Archive Completed Build Directory
      - uses: actions/upload-artifact@v3
        with:
          name: Windows-2022-${{ env.CI_ENV_BUILD_TYPE }}
          path: ${{ env.CI_ENV_BUILD_TYPE }}.zip
      - name: Build the Installer
        run: .\build_installer.bat
        if: ${{ env.CI_ENV_BUILD_TYPE == 'Release' }}
        shell: cmd
      - uses: actions/upload-artifact@v3
        if: ${{ env.CI_ENV_BUILD_TYPE == 'Release' }}
        with:
          name: Publish the Installer
          path: .\build\installer-inno\bin
          if-no-files-found: warn
